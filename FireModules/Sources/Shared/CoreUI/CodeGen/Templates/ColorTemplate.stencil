// swiftlint:disable superfluous_disable_command
// swiftlint:disable line_length
// swiftlint:disable file_length
// swiftlint:disable vertical_whitespace
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen
// DO NOT modify this file directly

{% if palettes %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{# ----- Convert hex string to rbga float values ----- #}
{% macro h2f hex %}{% filter removeNewlines %}
  {{hex|hexToInt|int255toFloat}}
{% endfilter %}{% endmacro %}
{# ----- Format color name to camel case ----- #}
{% macro formatColorName color %}{% filter removeNewlines %}
  {{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}
{% endfilter %}{% endmacro %}

public extension PlatformColor {
    struct CoreUI {
        {# ----- Define color literal properties----- #}
        {% macro enumBlock colors %}{% for color in colors %}
        /// #{{color.red|uppercase}}{{color.green|uppercase}}{{color.blue|uppercase}} (r: {{color.red|hexToInt}}, g: {{color.green|hexToInt}}, b: {{color.blue|hexToInt}}, a: {{color.alpha|hexToInt}})
        public var {% call formatColorName color %}: PlatformColor { #colorLiteral(red: {% call h2f color.red %}, green: {% call h2f color.green %}, blue: {% call h2f color.blue %}, alpha: {% call h2f color.alpha %}) }
        {% endfor %}{% endmacro %}
        {# ----- Define color literal properties----- #}
        {% for palette in palettes %}
          {% call enumBlock palette.colors %}
        {% endfor %}

        /// A collection of all custom colors generated by BECoreUI
        public var allColors: [PlatformColor] {
            return [{% for palette in palettes %}{% for color in palette.colors %}{% call formatColorName color %}{{ ", " if not forloop.last }}{% endfor %}{{ ", " if not forloop.last }}{% endfor %}]
        }
    }
}

public extension Color {
	struct CoreUI {
		{# ----- Define color literal properties----- #}
		{% macro enumBlock colors %}{% for color in colors %}
		/// #{{color.red|uppercase}}{{color.green|uppercase}}{{color.blue|uppercase}} (r: {{color.red|hexToInt}}, g: {{color.green|hexToInt}}, b: {{color.blue|hexToInt}}, a: {{color.alpha|hexToInt}})
		public var {% call formatColorName color %}: Color { Color(#colorLiteral(red: {% call h2f color.red %}, green: {% call h2f color.green %}, blue: {% call h2f color.blue %}, alpha: {% call h2f color.alpha %})) }
		{% endfor %}{% endmacro %}
		{# ----- Define color literal properties----- #}
		{% for palette in palettes %}
		{% call enumBlock palette.colors %}
		{% endfor %}

		/// A collection of all custom colors generated by BECoreUI
		public var allColors: [Color] {
			return [{% for palette in palettes %}{% for color in palette.colors %}{% call formatColorName color %}{{ ", " if not forloop.last }}{% endfor %}{{ ", " if not forloop.last }}{% endfor %}]
		}
	}
}

{{accessModifier}} extension PlatformColor {
    static let coreui = CoreUI()

    /// A collection of all custom color description generated by BECoreUI
    var allCoreUIColorDescription: [ColorDescription] {
        return [
            {% for palette in palettes %}
            {% for color in palette.colors %}
            ColorDescription(name: "{{color.name}}", color: PlatformColor.coreui.{{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}){{ "," if not forloop.last }}
            {% endfor %}
            {{ "," if not forloop.last }}
            {% endfor %}
        ]
    }
}

{{accessModifier}} extension Color {
    static let coreui = CoreUI()

    /// A collection of all custom color description generated by BECoreUI
    var allCoreUIColorDescription: [ColorDescription] {
        return [
            {% for palette in palettes %}
            {% for color in palette.colors %}
            ColorDescription(name: "{{color.name}}", color: PlatformColor.coreui.{{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}){{ "," if not forloop.last }}
            {% endfor %}
            {{ "," if not forloop.last }}
            {% endfor %}
        ]
    }
}

{{accessModifier}} struct ColorDescription {
    {{accessModifier}} let name: String
    {{accessModifier}} let color: PlatformColor
}
{% else %}
  // No color found
{% endif %}

// swiftlint:enable line_length
// swiftlint:enable file_length
// swiftlint:enable vertical_whitespace
// swiftlint:enable superfluous_disable_command
