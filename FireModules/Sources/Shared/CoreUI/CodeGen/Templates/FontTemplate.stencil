// swiftlint:disable superfluous_disable_command
// swiftlint:disable line_length
// swiftlint:disable file_length
// swiftlint:disable vertical_whitespace
// swiftlint:disable shorthand_optional_binding
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen
// Original template: https://github.com/SwiftGen/SwiftGen/blob/stable/Sources/SwiftGenCLI/templates/fonts/swift5.stencil

{% if families %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set fontType %}{{param.fontTypeName|default:"FontConvertible"}}{% endset %}
#if os(macOS)
  	import AppKit.NSFont
#elseif os(iOS) || os(tvOS) || os(watchOS)
  	import UIKit.UIFont
#endif
#if canImport(SwiftUI)
  	import SwiftUI
#endif

// Deprecated typealiases
@available(*, deprecated, renamed: "{{fontType}}.Font", message: "This typealias will be removed in SwiftGen 7.0")
{{accessModifier}} typealias {{param.fontAliasName|default:"Font"}} = {{fontType}}.Font

// MARK: - Fonts

// swiftlint:disable type_body_length
{% macro transformPath path %}
  {%- if param.preservePath -%}
    {{path}}
  {%- else -%}
    {{path|basename}}
  {%- endif -%}
{% endmacro %}
{{accessModifier}} enum {{param.enumName|default:"FontFamily"}} {
  {% for family in families %}
    {{accessModifier}} enum {{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
      {% for font in family.fonts %}
        {{accessModifier}} static let {{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{fontType}}(name: "{{font.name}}", family: "{{family.name}}", path: "{% call transformPath font.path %}")
      {% endfor %}
        {{accessModifier}} static let all: [{{fontType}}] = [{% for font in family.fonts %}{{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{{ ", " if not forloop.last }}{% endfor %}]
    }
  {% endfor %}
    {{accessModifier}} static let allCustomFonts: [{{fontType}}] = [{% for family in families %}{{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.all{{ ", " if not forloop.last }}{% endfor %}].flatMap { $0 }
    {{accessModifier}} static func registerAllCustomFonts() {
        allCustomFonts.forEach { $0.register() }
    }
}
// swiftlint:enable type_body_length

// MARK: - Implementation Details

{{accessModifier}} struct {{fontType}} {
    {{accessModifier}} let name: String
    {{accessModifier}} let family: String
    {{accessModifier}} let path: String

    #if os(macOS)
    {{accessModifier}} typealias Font = NSFont
    #elseif os(iOS) || os(tvOS) || os(watchOS)
    {{accessModifier}} typealias Font = UIFont
    #endif

    {{accessModifier}} func font(size: CGFloat) -> Font {
        guard let font = Font(font: self, size: size) else {
            fatalError("Unable to initialize font '\(name)' (\(family))")
        }
        return font
    }

    #if canImport(SwiftUI)
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    {{accessModifier}} func swiftUIFont(size: CGFloat) -> SwiftUI.Font {
        return SwiftUI.Font.custom(self, size: size)
    }

    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    {{accessModifier}} func swiftUIFont(fixedSize: CGFloat) -> SwiftUI.Font {
        return SwiftUI.Font.custom(self, fixedSize: fixedSize)
    }

    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    {{accessModifier}} func swiftUIFont(size: CGFloat, relativeTo textStyle: SwiftUI.Font.TextStyle) -> SwiftUI.Font {
        return SwiftUI.Font.custom(self, size: size, relativeTo: textStyle)
    }
    #endif

    {{accessModifier}} func register() {
        guard let url = url else { return }
        CTFontManagerRegisterFontsForURL(url as CFURL, .process, nil)
    }

    fileprivate func registerIfNeeded() {
        #if os(iOS) || os(tvOS) || os(watchOS)
        if !UIFont.fontNames(forFamilyName: family).contains(name) {
            register()
        }
        #elseif os(macOS)
        if let url = url, CTFontManagerGetScopeForURL(url as CFURL) == .none {
            register()
        }
        #endif
    }

    fileprivate var url: URL? {
        {% if param.lookupFunction %}
        return {{param.lookupFunction}}(name, family, path)
        {% else %}
        return {{param.bundle|default:"BundleToken.bundle"}}.url(forResource: path, withExtension: nil)
        {% endif %}
    }
}

{{accessModifier}} extension {{fontType}}.Font {
    convenience init?(font: {{fontType}}, size: CGFloat) {
        font.registerIfNeeded()
        self.init(name: font.name, size: size)
    }
}

#if canImport(SwiftUI)
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
{{accessModifier}} extension SwiftUI.Font {
    static func custom(_ font: {{fontType}}, size: CGFloat) -> SwiftUI.Font {
        font.registerIfNeeded()
        return custom(font.name, size: size)
    }
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
{{accessModifier}} extension SwiftUI.Font {
    static func custom(_ font: {{fontType}}, fixedSize: CGFloat) -> SwiftUI.Font {
        font.registerIfNeeded()
        return custom(font.name, fixedSize: fixedSize)
    }

    static func custom(
        _ font: {{fontType}},
        size: CGFloat,
        relativeTo textStyle: SwiftUI.Font.TextStyle
    ) -> SwiftUI.Font {
        font.registerIfNeeded()
        return custom(font.name, size: size, relativeTo: textStyle)
    }
}
#endif
{% if not param.bundle and not param.lookupFunction %}

// swiftlint:disable convenience_type
private final class BundleToken {
    static let bundle: Bundle = {
        #if SWIFT_PACKAGE
        return Bundle.module
        #else
        return Bundle(for: BundleToken.self)
        #endif
    }()
}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No fonts found
{% endif %}

// swiftlint:enable line_length
// swiftlint:enable file_length
// swiftlint:enable vertical_whitespace
// swiftlint:enable shorthand_optional_binding
// swiftlint:enable superfluous_disable_command
